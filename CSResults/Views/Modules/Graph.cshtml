@model CSResults.Models.ResultsGraphViewModel
@{
    ViewBag.Title = "Graph";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@{
    var yrs = new List<String>();
    var mean = new List<Double?>();
    var module_name = Model.resultViewModel.First().module.moduleName.ToString();

    foreach (var item in Model.resultViewModel)
    {
        yrs.Add(item.result.year);
        mean.Add(item.result.mean);
    }
}

<h2>Graph</h2>
<form>

    <div class="form-group row">

        <label for="module" class="col-lg-2 col-form-label">
            @Html.DisplayNameFor(model => model.resultViewModel.First().module.moduleName)
        </label>

        <div class="col-lg-7 search btn-group">
            <select id="module" class="form-control">
                @foreach (var item in Model.modules)
                {
                    <option> @Html.DisplayFor(modelItem => item.moduleName)</option>

                }
            </select>
        </div>

        <div class="col-lg-2">
            <button type="submit" class="btn btn-primary mb-2">Get Graph</button>
        </div>

    </div>

</form>
<canvas id="lineChart"></canvas>


<script>

    var ctx = document.getElementById('lineChart').getContext('2d');
    var chart = new Chart(ctx, {
    // The type of chart we want to create
    type: 'line',

    // The data for our dataset
    data: {
        labels: @Html.Raw(Json.Encode(yrs)),
        datasets: [{
            label: @Html.Raw(Json.Encode(module_name)),
            backgroundColor: 'rgb(255, 99, 132)',
            borderColor: 'rgb(255, 99, 132)',
            data: @Html.Raw(Json.Encode(mean))
        }]
    },

    // Configuration options go here
    options: {}
});

</script>
